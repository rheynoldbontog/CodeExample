@model UserListModel
@using Telerik.Web.Mvc.UI;
@using System.Globalization;
@{
    var gridPageSize = EngineContext.Current.Resolve<SSG.Core.Domain.Common.AdminAreaSettings>().GridPageSize;
    
    //page title
    ViewBag.Title = @T("Admin.Users.Users").Text;
}
@using (Html.BeginForm())
{
    <div class="section-header">
        <div class="title">
            <img src="@Url.Content("~/Administration/Content/images/ico-users.png")" alt="" />
            @T("Admin.Users.Users")
        </div>
        <div class="options">
            <a href="@Url.Action("Create")" class="t-button">@T("Admin.Common.AddNew")</a>
            <a href="@Url.Action("ExportXmlAll")" class="t-button">@T("Admin.Common.ExportToXml.All")</a>
            <input type="button" id="exportxml-selected" class="t-button" value="@T("Admin.Common.ExportToXml.Selected")" />
            <a href="@Url.Action("ExportExcelAll")" class="t-button">@T("Admin.Common.ExportToExcel.All")</a>
            <input type="button" id="exportexcel-selected" class="t-button" value="@T("Admin.Common.ExportToExcel.Selected")" />
        </div>
    </div>
    <table width="100%">
        <tr>
            <td class="adminTitle">
                @Html.SSGLabelFor(model => model.SearchUserRoleIds):
            </td>
            <td class="adminData">
                @foreach (var userRole in Model.AvailableUserRoles)
                {
                    <input type="checkbox" name="SearchUserRoleIds" value="@userRole.Id"
                @if (Model.SearchUserRoleIds != null && Model.SearchUserRoleIds.Contains(userRole.Id))
                {
                    <text>checked="checked"</text>
                }
                />@userRole.Name
                    <br />
                }
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SSGLabelFor(model => model.SearchEmail):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => Model.SearchEmail)
            </td>
        </tr>
        @if (Model.UsernamesEnabled)
        {
            <tr>
                <td class="adminTitle">
                    @Html.SSGLabelFor(model => model.SearchUsername):
                </td>
                <td class="adminData">
                    @Html.EditorFor(model => Model.SearchUsername)
                </td>
            </tr>
        }
        <tr>
            <td class="adminTitle">
                @Html.SSGLabelFor(model => model.SearchFirstName):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => Model.SearchFirstName)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SSGLabelFor(model => model.SearchLastName):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => Model.SearchLastName)
            </td>
        </tr>
        @if (Model.DateOfBirthEnabled)
        {
            <tr>
                <td class="adminTitle">
                    @Html.SSGLabelFor(model => model.SearchDayOfBirth):
                </td>
                <td class="adminData">
                    @{
            var monthOfBirthValues = new List<SelectListItem>();
            monthOfBirthValues.Add(new SelectListItem() { Text = T("Admin.Users.Users.List.SearchDateOfBirth.Month").Text, Value = "0" });
            for (int i = 1; i <= 12; i++)
            {
                monthOfBirthValues.Add(new SelectListItem() { Text = i.ToString(CultureInfo.InvariantCulture), Value = i.ToString(CultureInfo.InvariantCulture) });
            }
            var dayOfBirthValues = new List<SelectListItem>();
            dayOfBirthValues.Add(new SelectListItem() { Text = T("Admin.Users.Users.List.SearchDateOfBirth.Day").Text, Value = "0" });
            for (int i = 1; i <= 31; i++)
            {
                dayOfBirthValues.Add(new SelectListItem() { Text = i.ToString(CultureInfo.InvariantCulture), Value = i.ToString(CultureInfo.InvariantCulture) });
            }
                    }
                    @Html.DropDownListFor(model => Model.SearchMonthOfBirth, monthOfBirthValues)
                    @Html.DropDownListFor(model => Model.SearchDayOfBirth, dayOfBirthValues)
                </td>
            </tr>
        }
        
        @if (Model.CompanyEnabled)
        {
            <tr>
                <td class="adminTitle">
                    @Html.SSGLabelFor(model => model.SearchCompany):
                </td>
                <td class="adminData">
                    @Html.EditorFor(model => Model.SearchCompany)
                </td>
            </tr>
        }        
        @if (Model.PhoneEnabled)
        {
            <tr>
                <td class="adminTitle">
                    @Html.SSGLabelFor(model => model.SearchPhone):
                </td>
                <td class="adminData">
                    @Html.EditorFor(model => Model.SearchPhone)
                </td>
            </tr>
        }
        @if (Model.ZipPostalCodeEnabled)
        {
            <tr>
                <td class="adminTitle">
                    @Html.SSGLabelFor(model => model.SearchZipPostalCode):
                </td>
                <td class="adminData">
                    @Html.EditorFor(model => Model.SearchZipPostalCode)
                </td>
            </tr>
        } 
        <tr>
            <td colspan="2">
                <input type="button" id="search-users" class="t-button" value="@T("Admin.Common.Search")" />
            </td>
        </tr>
    </table>
    <p>
    </p>
    <table class="adminContent">
        <tr>
            <td>
                @(Html.Telerik().Grid<UserModel>(Model.Users.Data)
                    .Name("users-grid")
                    .ClientEvents(events => events
                        .OnDataBinding("onDataBinding")
                        .OnDataBound("onDataBound"))
                    .Columns(columns =>
                    {
                        columns.Bound(x => x.Id)
                        .Template(x => string.Format("<input type='checkbox' name='checkedRecords' value='{0}' class='checkboxGroups'/>", x.Id))
                        .ClientTemplate("<input type='checkbox' name='checkedRecords' value='<#= Id #>' class='checkboxGroups'/>")
                        .Title("<input id='mastercheckbox' type='checkbox'/>")
                        .Width(50)
                        .HtmlAttributes(new { style = "text-align:center" })
                        .HeaderHtmlAttributes(new { style = "text-align:center" });

                        columns.Bound(x => x.Id)
                            .Width(50);
                        //I don't know why but the user list does not have an 'Edit' column in the grid on some machines (maybe because we are inside Html.BeginForm()).
                        //That's why the 'Email' column is clickable.
                        columns.Bound(x => x.Email)
                            .Template(x => Html.ActionLink(x.Email, "Edit", "User", new { id = x.Id }, new { }))
                            .ClientTemplate("<a href=\"" + @Url.Content("~/Admin/User/Edit/") + "<#= Id #>\"><#= Email #></a>")
                            .Width(150);
                        columns.Bound(x => x.Username)
                            .Width(150)
                            .Visible(Model.UsernamesEnabled);
                        columns.Bound(x => x.FullName)
                            .Width(200);
                        columns.Bound(x => x.UserRoleNames)
                            .Width(200);
                        columns.Bound(x => x.Company)
                            .Width(150)
                            .Visible(Model.CompanyEnabled);
                        columns.Bound(x => x.Phone)
                            .Width(100)
                            .Visible(Model.PhoneEnabled);
                        columns.Bound(x => x.ZipPostalCode)
                            .Width(75)
                            .Visible(Model.ZipPostalCodeEnabled);
                        columns.Bound(x => x.Active)
                             .Width(100)
                             .Template(x => x.Active.ToString().ToLower())
                             .Centered();
                        columns.Bound(x => x.CreatedOn)
                            .Width(100);
                        columns.Bound(x => x.LastActivityDate)
                            .Width(100);
                        columns.Bound(x => x.Id)
                            .Width(50)
                            .Centered()
                            .Template(x => Html.ActionLink(T("Admin.Common.Edit").Text, "Edit", new { id = x.Id }))
                            .ClientTemplate("<a href=\"Edit/<#= Id #>\">" + T("Admin.Common.Edit").Text + "</a>")
                            .Title(T("Admin.Common.Edit").Text);
                    })
                    .Pageable(settings => settings.Total(Model.Users.Total).PageSize(gridPageSize).Position(GridPagerPosition.Both))
                    .DataBinding(dataBinding => dataBinding.Ajax().Select("UserList", "User"))
                    .EnableCustomBinding(true))
            </td>
        </tr>
    </table>
    
    <script type="text/javascript">

        var selectedIds = [];

        $(document).ready(function () {

            //search button
            $('#search-users').click(function () {
                var grid = $('#users-grid').data('tGrid');
                grid.currentPage = 1; //new search. Set page size to 1
                grid.ajaxRequest();
                return false;
            });

            $("#@Html.FieldIdFor(model => model.SearchEmail)").keydown(function (event) {
                if (event.keyCode == 13) {
                    $("#search-users").click();
                    return false;
                }
            });
            $("#@Html.FieldIdFor(model => model.SearchUsername)").keydown(function (event) {
                if (event.keyCode == 13) {
                    $("#search-users").click();
                    return false;
                }
            });
            $("#@Html.FieldIdFor(model => model.SearchFirstName)").keydown(function (event) {
                if (event.keyCode == 13) {
                    $("#search-users").click();
                    return false;
                }
            });
            $("#@Html.FieldIdFor(model => model.SearchLastName)").keydown(function (event) {
                if (event.keyCode == 13) {
                    $("#search-users").click();
                    return false;
                }
            });
            $("#@Html.FieldIdFor(model => model.SearchCompany)").keydown(function (event) {
                if (event.keyCode == 13) {
                    $("#search-users").click();
                    return false;
                }
            });
            $("#@Html.FieldIdFor(model => model.SearchPhone)").keydown(function (event) {
                if (event.keyCode == 13) {
                    $("#search-users").click();
                    return false;
                }
            });
            $("#@Html.FieldIdFor(model => model.SearchZipPostalCode)").keydown(function (event) {
                if (event.keyCode == 13) {
                    $("#search-users").click();
                    return false;
                }
            });

            //"Export Excel selected" button
            $('#exportexcel-selected').click(function (e) {
                e.preventDefault();
                //redirect to required URL
                setLocation('@(Url.Action("ExportExcelSelected", "User"))?selectedIds=' + selectedIds.join(","));
                return false;
            });

            //"Export XML selected" button
            $('#exportxml-selected').click(function (e) {
                e.preventDefault();
                //redirect to required URL
                setLocation('@(Url.Action("ExportXmlSelected", "User"))?selectedIds=' + selectedIds.join(","));
                return false;
            });

            $('#mastercheckbox').click(function () {
                $('.checkboxGroups').attr('checked', $(this).is(':checked')).change();
            });

            //wire up checkboxes. 
            $('#users-grid input[type=checkbox][id!=mastercheckbox]').live('change', function (e) {
                var $check = $(this);
                if ($check.is(":checked") == true) {
                    var checked = jQuery.inArray($check.val(), selectedIds);
                    if (checked == -1) {
                        //add id to selectedIds.  
                        selectedIds.push($check.val());
                    }
                }
                else {
                    var checked = jQuery.inArray($check.val(), selectedIds);
                    if (checked > -1) {
                        //remove id from selectedIds.  
                        selectedIds = $.grep(selectedIds, function (item, index) {
                            return item != $check.val();
                        });
                    }
                }
                updateMasterCheckbox();
            });
        });

        function onDataBound(e) {

            $('#users-grid input[type=checkbox][id!=mastercheckbox]').each(function () {
                var currentId = $(this).val();
                var checked = jQuery.inArray(currentId, selectedIds);
                //set checked based on if current checkbox's value is in selectedIds.  
                $(this).attr('checked', checked > -1);
            });

            updateMasterCheckbox();
        }

        function updateMasterCheckbox() {
            var numChkBoxes = $('#users-grid input[type=checkbox][id!=mastercheckbox]').length;
            var numChkBoxesChecked = $('#users-grid input[type=checkbox][checked][id!=mastercheckbox]').length;
            $('#mastercheckbox').attr('checked', numChkBoxes == numChkBoxesChecked && numChkBoxes > 0);
        }

        function onDataBinding(e) {
            var userRoleIds = [];
            $('[name=SearchUserRoleIds]:checked').each(function () {
                userRoleIds.push($(this).val());
            });

            var searchModel = {
                SearchUserRoleIds: userRoleIds.join(","),
                SearchEmail: $('#@Html.FieldIdFor(model => model.SearchEmail)').val(),
                SearchUsername: $('#@Html.FieldIdFor(model => model.SearchUsername)').val(),
                SearchFirstName: $('#@Html.FieldIdFor(model => model.SearchFirstName)').val(),
                SearchLastName: $('#@Html.FieldIdFor(model => model.SearchLastName)').val(),
                SearchDayOfBirth: $('#@Html.FieldIdFor(model => model.SearchDayOfBirth)').val(),
                SearchMonthOfBirth: $('#@Html.FieldIdFor(model => model.SearchMonthOfBirth)').val(),
                SearchCompany: $('#@Html.FieldIdFor(model => model.SearchCompany)').val(),
                SearchPhone: $('#@Html.FieldIdFor(model => model.SearchPhone)').val(),
                SearchZipPostalCode: $('#@Html.FieldIdFor(model => model.SearchZipPostalCode)').val()
            };
            e.data = searchModel;
        }
    </script>
}