// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments and CLS compliance
// 0108: suppress "Foo hides inherited member Foo. Use the new keyword if hiding was intended." when a controller and its abstract parent are both processed
// 0114: suppress "Foo.BarController.Baz()' hides inherited member 'Qux.BarController.Baz()'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword." when an action (with an argument) overrides an action in a parent controller
#pragma warning disable 1591, 3008, 3009, 0108, 0114
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;
namespace SSG.Web.Controllers
{
    public partial class NewsletterController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected NewsletterController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(Task<ActionResult> taskResult)
        {
            return RedirectToAction(taskResult.Result);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(Task<ActionResult> taskResult)
        {
            return RedirectToActionPermanent(taskResult.Result);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult SubscribeNewsletter()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.SubscribeNewsletter);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult SubscriptionActivation()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.SubscriptionActivation);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public NewsletterController Actions { get { return MVC.Newsletter; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "Newsletter";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "Newsletter";
        [GeneratedCode("T4MVC", "2.0")]
        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string NewsletterBox = "NewsletterBox";
            public readonly string SubscribeNewsletter = "SubscribeNewsletter";
            public readonly string SubscriptionActivation = "SubscriptionActivation";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string NewsletterBox = "NewsletterBox";
            public const string SubscribeNewsletter = "SubscribeNewsletter";
            public const string SubscriptionActivation = "SubscriptionActivation";
        }


        static readonly ActionParamsClass_SubscribeNewsletter s_params_SubscribeNewsletter = new ActionParamsClass_SubscribeNewsletter();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_SubscribeNewsletter SubscribeNewsletterParams { get { return s_params_SubscribeNewsletter; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_SubscribeNewsletter
        {
            public readonly string subscribe = "subscribe";
            public readonly string email = "email";
        }
        static readonly ActionParamsClass_SubscriptionActivation s_params_SubscriptionActivation = new ActionParamsClass_SubscriptionActivation();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_SubscriptionActivation SubscriptionActivationParams { get { return s_params_SubscriptionActivation; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_SubscriptionActivation
        {
            public readonly string token = "token";
            public readonly string active = "active";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
                public readonly string NewsletterBox = "NewsletterBox";
                public readonly string SubscriptionActivation = "SubscriptionActivation";
                public readonly string SubscriptionActivation_Mobile = "SubscriptionActivation.Mobile";
            }
            public readonly string NewsletterBox = "~/Views/Newsletter/NewsletterBox.cshtml";
            public readonly string SubscriptionActivation = "~/Views/Newsletter/SubscriptionActivation.cshtml";
            public readonly string SubscriptionActivation_Mobile = "~/Views/Newsletter/SubscriptionActivation.Mobile.cshtml";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_NewsletterController : SSG.Web.Controllers.NewsletterController
    {
        public T4MVC_NewsletterController() : base(Dummy.Instance) { }

        [NonAction]
        partial void NewsletterBoxOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult NewsletterBox()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.NewsletterBox);
            NewsletterBoxOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void SubscribeNewsletterOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, bool subscribe, string email);

        [NonAction]
        public override System.Web.Mvc.ActionResult SubscribeNewsletter(bool subscribe, string email)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.SubscribeNewsletter);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "subscribe", subscribe);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "email", email);
            SubscribeNewsletterOverride(callInfo, subscribe, email);
            return callInfo;
        }

        [NonAction]
        partial void SubscriptionActivationOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, System.Guid token, bool active);

        [NonAction]
        public override System.Web.Mvc.ActionResult SubscriptionActivation(System.Guid token, bool active)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.SubscriptionActivation);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "token", token);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "active", active);
            SubscriptionActivationOverride(callInfo, token, active);
            return callInfo;
        }

    }
}

#endregion T4MVC
#pragma warning restore 1591, 3008, 3009, 0108, 0114
