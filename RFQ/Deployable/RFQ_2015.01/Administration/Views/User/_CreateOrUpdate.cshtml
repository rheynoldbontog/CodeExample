@model UserModel
@using Telerik.Web.Mvc.UI;
@Html.ValidationSummary(false)
@Html.HiddenFor(model => model.Id)
@Html.Telerik().TabStrip().Name("user-edit").Items(x =>
{
    var tabInfo = x.Add().Text(T("Admin.Users.Users.Info").Text).Content(TabInfo().ToHtmlString());
    var tabUserRoles = x.Add().Text(T("Admin.Users.Users.UserRoles").Text).Content(TabUserRoles().ToHtmlString());

    TabStripItemBuilder tabBuyerDepartments = null;
    if (Model.Id > 0 && Model.AllowManageingBuyerDepartments)
    {
        tabBuyerDepartments = x.Add().Text("Buyer Departments").Content(TabBuyerDepartments().ToHtmlString());
    }

    TabStripItemBuilder tabAddresses = null;
    if (Model.Id > 0)
        tabAddresses = x.Add().Text(T("Admin.Users.Users.Addresses").Text).Content(TabAddresses().ToHtmlString());

    TabStripItemBuilder tabActivityLog = null;
    if (Model.Id > 0)
        tabActivityLog = x.Add().Text(T("Admin.Users.Users.ActivityLog").Text).Content(TabActivityLog().ToHtmlString());

    TabStripItemBuilder tabImpersonate = null;
    if (Model.Id > 0)
        tabImpersonate = x.Add().Text(T("Admin.Users.Users.Impersonate").Text).Content(TabImpersonate().ToHtmlString());

    var selectedTab = (string)ViewData["selectedTab"];
    switch (selectedTab)
    {
        case "info":
            tabInfo.Selected(true);
            break;
        case "buyerdepartments":
            tabBuyerDepartments.Selected(true);
            break;
        case "userroles":
            tabUserRoles.Selected(true);
            break;
        case "addresses":
            tabAddresses.Selected(true);
            break;
        case "activitylog":
            tabActivityLog.Selected(true);
            break;
        case "impersonate":
            tabImpersonate.Selected(true);
            break;
        default:
            tabInfo.Selected(true);
            break;
    }

    //generate an event
    EngineContext.Current.Resolve<IEventPublisher>().Publish(new AdminTabStripCreated(x, "user-edit"));
})
@helper TabInfo()
    { 
        if (Model.CountryEnabled && Model.StateProvinceEnabled)
        {
    <script type="text/javascript">
             $(function() {
                    $("#@Html.FieldIdFor(model => model.CountryId)").change(function() {
                        var selectedItem = $(this).val();
                        var ddlStates = $("#@Html.FieldIdFor(model => model.StateProvinceId)")
                        $.ajax({
                            cache:false,
                            type: "GET",
                            url: "@(Url.Action("GetStatesByCountryId", "Country"))",
                            data: { "countryId": selectedItem, "addEmptyStateIfRequired": "true" },
                            success: function (data) {
                                ddlStates.html('');
                                $.each(data, function(id, option) {
                                    ddlStates.append($('<option></option>').val(option.id).html(option.name));
                                });
                            },
                            error:function (xhr, ajaxOptions, thrownError){
                                alert('Failed to retrieve states.');
                            }  
                        });
                    });
                });
    </script>
        }
    <table class="adminContent">
        @if (Model.UsernamesEnabled)
        {
            if (Model.Id == 0 || Model.AllowUsersToChangeUsernames)
            {
            <tr>
                <td class="adminTitle">
                    @Html.SSGLabelFor(model => model.Username):
                </td>
                <td class="adminData">
                    @Html.EditorFor(model => model.Username)
                    @Html.ValidationMessageFor(model => model.Username)
                </td>
            </tr>
            }
            else
            {
            <tr>
                <td class="adminTitle">
                    @Html.SSGLabelFor(model => model.Username):
                </td>
                <td class="adminData">
                    @Model.Username
                    @Html.HiddenFor(model => model.Username)
                </td>
            </tr>
            }
        }
        <tr>
            <td class="adminTitle">
                @Html.SSGLabelFor(model => model.Email):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.Email)
                @Html.ValidationMessageFor(model => model.Email)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SSGLabelFor(model => model.Password):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.Password)
                @Html.ValidationMessageFor(model => model.Password)
                @if (Model.Id > 0)
                {
                    <input type="submit" name="changepassword" class="t-button" value="Change password" />
                }
            </td>
        </tr>
        @if (Model.Id > 0 && Model.AssociatedExternalAuthRecords.Count > 0)
        {
            <tr>
                <td class="adminTitle">
                    @Html.SSGLabelFor(model => model.AssociatedExternalAuthRecords):
                </td>
                <td class="adminData">
                    @(Html.Telerik().Grid<UserModel.AssociatedExternalAuthModel>(Model.AssociatedExternalAuthRecords)
                    .Name("externalauthrecords-grid")
                    .Columns(columns =>
                    {
                        columns.Bound(x => x.AuthMethodName)
                            .Width(100);
                        columns.Bound(x => x.Email)
                             .Width(100);
                        columns.Bound(x => x.ExternalIdentifier)
                            .Width(300);
                    })
                    .Footer(false))
                </td>
            </tr>
        }
        @if (Model.GenderEnabled)
        {
            <tr>
                <td class="adminTitle">
                    @Html.SSGLabelFor(model => model.Gender):
                </td>
                <td class="adminData">
                    @Html.RadioButton("Gender", "M", (Model.Gender == "M"), new { id = "Gender_Male" })
                    <label class="forcheckbox" for="Gender_Male">@T("Admin.Users.Users.Fields.Gender.Male")</label>
                    @Html.RadioButton("Gender", "F", (Model.Gender == "F"), new { id = "Gender_Female" })
                    <label class="forcheckbox" for="Gender_Female">@T("Admin.Users.Users.Fields.Gender.Female")</label>
                </td>
            </tr>
        }
        <tr>
            <td class="adminTitle">
                @Html.SSGLabelFor(model => model.FirstName):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.FirstName)
                @Html.ValidationMessageFor(model => model.FirstName)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SSGLabelFor(model => model.LastName):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.LastName)
                @Html.ValidationMessageFor(model => model.LastName)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.SSGLabelFor(model => model.EmployeeId):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.EmployeeId)
                @Html.ValidationMessageFor(model => model.EmployeeId)
            </td>
        </tr>
        @if (Model.DepartmentEnabled)
        {
            <tr>
            <td class="adminTitle">
                @Html.SSGLabelFor(model => model.DepartmentId):
            </td>
            <td class="adminData">
                @Html.DropDownListFor(model => model.DepartmentId, Model.AvailableDepartments)
                @Html.RequiredHint()
                @Html.ValidationMessageFor(model => model.DepartmentId)
            </td>
        </tr>
        }
        @if (Model.DateOfBirthEnabled)
        {
            <tr>
                <td class="adminTitle">
                    @Html.SSGLabelFor(model => model.DateOfBirth):
                </td>
                <td class="adminData">
                    @Html.EditorFor(model => model.DateOfBirth)
                    @Html.ValidationMessageFor(model => model.DateOfBirth)
                </td>
            </tr>
        }
        @if (Model.CompanyEnabled)
        {
            <tr>
                <td class="adminTitle">
                    @Html.SSGLabelFor(model => model.Company):
                </td>
                <td class="adminData">
                    @Html.EditorFor(model => model.Company)
                    @Html.ValidationMessageFor(model => model.Company)
                </td>
            </tr>
        }
        @if (Model.StreetAddressEnabled)
        {
            <tr>
                <td class="adminTitle">
                    @Html.SSGLabelFor(model => model.StreetAddress):
                </td>
                <td class="adminData">
                    @Html.EditorFor(model => model.StreetAddress)
                    @Html.ValidationMessageFor(model => model.StreetAddress)
                </td>
            </tr>
        }
        @if (Model.StreetAddress2Enabled)
        {
            <tr>
                <td class="adminTitle">
                    @Html.SSGLabelFor(model => model.StreetAddress2):
                </td>
                <td class="adminData">
                    @Html.EditorFor(model => model.StreetAddress2)
                    @Html.ValidationMessageFor(model => model.StreetAddress2)
                </td>
            </tr>
        }
        @if (Model.ZipPostalCodeEnabled)
        {
            <tr>
                <td class="adminTitle">
                    @Html.SSGLabelFor(model => model.ZipPostalCode):
                </td>
                <td class="adminData">
                    @Html.EditorFor(model => model.ZipPostalCode)
                    @Html.ValidationMessageFor(model => model.ZipPostalCode)
                </td>
            </tr>
        }
        @if (Model.CityEnabled)
        {
            <tr>
                <td class="adminTitle">
                    @Html.SSGLabelFor(model => model.City):
                </td>
                <td class="adminData">
                    @Html.EditorFor(model => model.City)
                    @Html.ValidationMessageFor(model => model.City)
                </td>
            </tr>
        }
        @if (Model.CountryEnabled)
        {
            <tr>
                <td class="adminTitle">
                    @Html.SSGLabelFor(model => model.CountryId):
                </td>
                <td class="adminData">
                    @Html.DropDownList("CountryId", Model.AvailableCountries)
                </td>
            </tr>
        }
        @if (Model.CountryEnabled && Model.StateProvinceEnabled)
        {
            <tr>
                <td class="adminTitle">
                    @Html.SSGLabelFor(model => model.StateProvinceId):
                </td>
                <td class="adminData">
                    @Html.DropDownList("StateProvinceId", Model.AvailableStates)
                </td>
            </tr>
        }
        @if (Model.PhoneEnabled)
        {
            <tr>
                <td class="adminTitle">
                    @Html.SSGLabelFor(model => model.Phone):
                </td>
                <td class="adminData">
                    @Html.EditorFor(model => model.Phone)
                    @Html.ValidationMessageFor(model => model.Phone)
                </td>
            </tr>
        }
        @if (Model.FaxEnabled)
        {
            <tr>
                <td class="adminTitle">
                    @Html.SSGLabelFor(model => model.Fax):
                </td>
                <td class="adminData">
                    @Html.EditorFor(model => model.Fax)
                    @Html.ValidationMessageFor(model => model.Fax)
                </td>
            </tr>
        }
        <tr>
            <td class="adminTitle">
                @Html.SSGLabelFor(model => model.AdminComment):
            </td>
            <td class="adminData">
                @Html.TextAreaFor(model => model.AdminComment, new { style = "Width: 250px; Height: 200px;" })
                @Html.ValidationMessageFor(model => model.AdminComment)
            </td>
        </tr>
        @if (Model.AllowUsersToSetTimeZone)
        {
            <tr>
                <td class="adminTitle">
                    @Html.SSGLabelFor(model => model.TimeZoneId):
                </td>
                <td class="adminData">
                    @Html.DropDownList("TimeZoneId", Model.AvailableTimeZones)
                    @Html.ValidationMessageFor(model => model.TimeZoneId)
                </td>
            </tr>
        }
        <tr>
            <td class="adminTitle">
                @Html.SSGLabelFor(model => model.Active):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.Active)
                @Html.ValidationMessageFor(model => model.Active)
            </td>
        </tr>
        @if (Model.Id > 0)
        {
            <tr>
                <td class="adminTitle">
                    @Html.SSGLabelFor(model => model.LastIpAddress):
                </td>
                <td class="adminData">
                    @Html.DisplayFor(model => model.LastIpAddress)
                </td>
            </tr>
        }
        @if (Model.Id > 0)
        {
            <tr>
                <td class="adminTitle">
                    @Html.SSGLabelFor(model => model.CreatedOn):
                </td>
                <td class="adminData">
                    @Html.DisplayFor(model => model.CreatedOn)
                </td>
            </tr>
        }
        @if (Model.Id > 0)
        {
            <tr>
                <td class="adminTitle">
                    @Html.SSGLabelFor(model => model.LastActivityDate):
                </td>
                <td class="adminData">
                    @Html.DisplayFor(model => model.LastActivityDate)
                </td>
            </tr>
        }
        @if (Model.Id > 0 && !String.IsNullOrEmpty(Model.LastVisitedPage))
        {
            <tr>
                <td class="adminTitle">
                    @Html.SSGLabelFor(model => model.LastVisitedPage):
                </td>
                <td class="adminData">
                    @Html.DisplayFor(model => model.LastVisitedPage)
                </td>
            </tr>
        }
    </table>
}
@helper TabBuyerDepartments()
    {
    if (Model.AvailableBuyerDepartments != null && Model.AvailableBuyerDepartments.Count > 0)
    {
        foreach (var department in Model.AvailableBuyerDepartments)
        {
          <input type="checkbox" name="SelectedBuyerDepartmentIds" value="@department.Id"
                @if (Model.SelectedBuyerDepartmentIds != null && Model.SelectedBuyerDepartmentIds.Contains(department.Id))
                {
                    <text> checked="checked"</text>
                }
                @if (!Model.AllowManageingBuyerDepartments)
                {
                <text> disabled="disabled"</text>
                }
                />@department.Name
    <br />
        }
    }
    else
    {
     <p>No Buyer Departments!</p>    
    }
}

@helper TabUserRoles()
    {
        if (Model.AvailableUserRoles != null && Model.AvailableUserRoles.Count > 0)
        {
            foreach (var userRole in Model.AvailableUserRoles)
            {
    <input type="checkbox" name="SelectedUserRoleIds" value="@userRole.Id"
                @if (Model.SelectedUserRoleIds != null && Model.SelectedUserRoleIds.Contains(userRole.Id))
                {
                    <text> checked="checked"</text>
                }
                @if (!Model.AllowManagingUserRoles)
                {
                <text> disabled="disabled"</text>
                }
                />@userRole.Name
    <br />
            }
        }
        else
        {
    @T("Admin.Users.Users.Fields.UserRoles.NoRoles")
        }
}
@helper TabAddresses()
    {
    @(Html.Telerik().Grid<AddressModel>().Name("user-addresses-grid")
    .DataKeys(keys =>
    {
        keys.Add(x => x.Id).RouteKey("addressId");
    })
    .DataBinding(binding =>
    {
        binding.Ajax()
            .Select("AddressesSelect", "User", new { userId = Model.Id })
            .Delete("AddressDelete", "User", new { userId = Model.Id });
    })
    .Columns(columns =>
    {
        columns.Bound(x => x.FirstName);
        columns.Bound(x => x.LastName);
        columns.Bound(x => x.Email);
        columns.Bound(x => x.PhoneNumber);
        columns.Bound(x => x.FaxNumber);
        columns.Bound(x => x.AddressHtml)
            .Encoded(false);
        columns.Bound(x => x.Id)
            .ClientTemplate("<a href=\"" + @Url.Content("~/Admin/User/AddressEdit?userId=") + @Model.Id + "&addressid=<#= Id #>\">" + T("Admin.Common.Edit").Text + "</a>")
            .Title(T("Admin.Common.Edit").Text);
        columns.Command(commands =>
        {
            commands.Delete();
        })
            .Title(T("Admin.Common.Delete").Text);
    }))
    <div class="clear">
    </div>
    <p>
        <strong>
            <input type="button" class="t-button" onclick="location.href='@Url.Action("AddressCreate", new { userId = Model.Id })'" value='@T("Admin.Users.Users.Addresses.AddButton")' />
        </strong>
    </p>
}
@helper TabActivityLog()
    {
        var gridPageSize = EngineContext.Current.Resolve<SSG.Core.Domain.Common.AdminAreaSettings>().GridPageSize;
    
    <table class="adminContent">
        <tr>
            <td>
                @(Html.Telerik().Grid<UserModel.ActivityLogModel>()
                            .Name("activitylog-grid")
                            .Columns(columns =>
                            {
                                columns.Bound(x => x.ActivityLogTypeName)
                                    .Centered();
                                columns.Bound(x => x.Comment)
                                    .Centered();
                                columns.Bound(x => x.CreatedOn)
                                    .Centered();
                            })
                            .Pageable(settings => settings.PageSize(gridPageSize).Position(GridPagerPosition.Both))
                            .DataBinding(dataBinding => dataBinding.Ajax()
                                .Select("ListActivityLog", "User", new
                                {
                                    userId = Model.Id
                                }))
                        )
            </td>
        </tr>
    </table>
}
@helper TabImpersonate()
    {
    <table class="adminContent">
        <tr>
            <td>
                @T("Admin.Users.Users.Impersonate.Description1")
                <br />
                @T("Admin.Users.Users.Impersonate.Description2")
                <br />
                <br />
                <input type="submit" name="impersonate" class="t-button" value="@T("Admin.Users.Users.Impersonate.Button")" />
            </td>
        </tr>
    </table>
}
