@model SSG.Web.Models.RFQ.RFQLineModel
@{
    
    var title = Model.Id == 0 ? "Add RFQ Line" : "Edit RFQ Line";
    
}
@using (Html.BeginHorizontalForm("modal_form"))
{
    @Html.AntiForgeryToken()

    @Html.HiddenFor(model => model.Id)
    @Html.HiddenFor(model => model.RFQId)
    @Html.HiddenFor(model => model.Active)
    @Html.HiddenFor(model => model.CreatedByUserId)
    @Html.HiddenFor(model => model.UpdatedByUserId)
    @Html.HiddenFor(model => model.DateCreatedOnUtc)
    @Html.HiddenFor(model => model.DateUpdatedOnUtc)
    @Html.HiddenFor(model => model.RFQLineNo)
    @Html.HiddenFor(model => model.FirstUploadDate)
    @Html.HiddenFor(model => model.UserCanAddDeleteQuotation)
    @Html.HiddenFor(model => model.RFQIsSubmitted)
    @Html.HiddenFor(model => model.IsUserCanDeletable)
    @Html.HiddenFor(model => model.IsUserCanEditable)
    @Html.HiddenFor(model => model.UserIsBuyer)
    @Html.HiddenFor(model => model.UserIsRequestor)
    @Html.Hidden("initial_form_type", Model.FormTypeId)

    <div class="modal-header dark-primary-color">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true" style="color: White">
            &times;</button>
        <h4 class="modal-title color4" id="myModalLabel">@title</h4>
    </div>
    
    <div class="modal-body">
        <div class="span12 master-wrapper-center-1">
            <div class="row-fluid">
                <div class="content-header">
                    <i class="fa fa-google-wallet fa-2x fa-pull-left fa-border color9" aria-hidden="true"></i><h3 class="color6">RFQ Line Form <small>Add or update line details and add quotations</small></h3>
                </div>
            </div>
            <div class="row-fluid">
                <div class="span12 master-wrapper-center-1">
                    @Html.ValidationSummary(false, "Please fix the following errors:", new { @class = "alert alert-danger" })
                </div>
            </div>
            <table class="table table-striped table-bordered">
                <thead>
                    <tr>
                        <th style="width: 200px;">@Html.LabelFor(model => model.RFQNo)
                        </th>
                        <th style="width: 100px;">
                            <div align="center">@Html.DisplayFor(model => model.RFQNo)</div>
                        </th>
                        <th colspan="3" rowspan="15">
                            <div align="center">
                                RFQ Details</div>
                        </th>
                    </tr>
                    <tr>
                        <th style="width: 200px;">@Html.LabelFor(model => model.RFQLineNo)
                        </th>
                        <th style="width: 100px;">
                            <div align="center">@Html.DisplayFor(model => model.RFQLineNo)</div>
                        </th>
                    </tr>
                    <tr>
                        <th style="width: 200px;">@Html.LabelFor(model => model.RFQCreationDate)
                        </th>
                        <th style="width: 100px;">
                            <div align="center">@Html.DisplayFor(model => model.RFQCreationDate)</div>
                        </th>
                    </tr>
                    <tr>
                        <th style="width: 200px;">@Html.LabelFor(model => model.RFQStatus)
                        </th>
                        <th style="width: 100px;">
                            <div align="center">@Html.DisplayFor(model => model.RFQStatus)</div>
                        </th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td colspan="2">@Html.LabelFor(model => model.FormTypeId)
                        </td>
                        <td>
                            @if (Model.RFQIsSubmitted)
                            {
                                @Html.HiddenFor(model => model.FormTypeId);   
                                @Html.TextBoxFor(model => model.FormType, new { @placeholder = "Form Type", @readonly = "readonly" })
                            }
                            else
                            {
                                @Html.DropDownListFor(model => model.FormTypeId, Model.AvailableFormTypes, null, new { @class = "form-control", @onchange = "rfqModal.changeFormType(this);", data_toggle = "tooltip", title = "Select a form type for this line!", data_placement = "right" })
                            }
                            @Html.RequiredHint()
                            @Html.ValidationMessageFor(m => m.FormTypeId, string.Empty, new { @class = "help-inline" })
                        </td>
                    </tr>
                    <tr>
                        <td colspan="2">@Html.LabelFor(model => model.LineTypeId)
                        </td>
                        <td>
                            @if (Model.RFQIsSubmitted)
                            {
                                @Html.HiddenFor(model => model.LineTypeId);   
                                @Html.TextBoxFor(model => model.LineType, new { @placeholder = "Line Type", @readonly = "readonly" })
                            }
                            else
                            {
                                @Html.DropDownListFor(model => model.LineTypeId, Model.AvailableLineTypes, "Select Line Type", new { @class = "form-control", data_toggle = "tooltip", title = "Select a line type for this line!", data_placement = "right" })
                            }
                            @Html.RequiredHint()
                            @Html.ValidationMessageFor(m => m.LineTypeId, string.Empty, new { @class = "help-inline" })
                        </td>
                    </tr>
                    <tr>
                        <td colspan="2">@Html.LabelFor(model => model.ItemDescription)
                        </td>
                        <td>
                            @if (Model.RFQIsSubmitted)
                            {
                                @Html.TextAreaFor(model => model.ItemDescription, new { @class = "form-control rfo-large-textbox", placeholder = "Item Description", @readonly = Model.RFQIsSubmitted ? "readonly" : "" })
                            }
                            else
                            {
                                @Html.TextAreaFor(model => model.ItemDescription, new { @class = "form-control rfo-large-textbox", placeholder = "Item Description", data_toggle = "tooltip", title = "Item Description", data_placement = "right" })
                            }
                            @Html.RequiredHint()
                            @Html.ValidationMessageFor(model => model.ItemDescription, string.Empty, new { @class = "help-inline" })
                        </td>
                    </tr>
                    <tr>
                        <td colspan="2">@Html.LabelFor(model => model.Quantity)
                        </td>
                        <td>
                            @if (Model.RFQIsSubmitted)
                            {
                                @Html.TextBoxFor(model => model.Quantity, new { @placeholder = "Quantity", @readonly = "readonly" })
                            }
                            else
                            {
                                @Html.TextBoxFor(model => model.Quantity, new { @placeholder = "Quantity" })
                            }
                            @Html.RequiredHint()
                            @Html.ValidationMessageFor(model => model.Quantity, string.Empty, new { @class = "help-inline" })
                        </td>
                    </tr>
                    <tr>
                        <td colspan="2">@Html.LabelFor(model => model.QuantityUnit)
                        </td>
                        <td>
                            @if (Model.RFQIsSubmitted)
                            {
                                @Html.HiddenFor(model => model.QuantityUnitId);   
                                @Html.TextBoxFor(model => model.QuantityUnit, new { @placeholder = "Unit", @readonly = "readonly" })
                            }
                            else
                            {
                                @Html.DropDownListFor(model => model.QuantityUnitId, Model.AvailableUnits, "Select Unit", new { @class = "form-control" })
                            }
                            @Html.RequiredHint()
                            @Html.ValidationMessageFor(m => m.QuantityUnitId, string.Empty, new { @class = "help-inline" })
                        </td>
                    </tr>
                    <tr>
                        <td colspan="2">@Html.LabelFor(model => model.Maker)
                        </td>
                        <td>
                            @if (Model.RFQIsSubmitted)
                            {
                                @Html.TextBoxFor(model => model.Maker, new { @placeholder = "Maker", @readonly = "readonly" })
                            }
                            else
                            {
                                @Html.TextBoxFor(model => model.Maker, new { @placeholder = "Maker" })
                            }
                            @Html.RequiredHint()
                            @Html.ValidationMessageFor(model => model.Maker, string.Empty, new { @class = "help-inline" })
                        </td>
                    </tr>
                    <tr>
                        <td colspan="2">@Html.LabelFor(model => model.MakerPN)
                        </td>
                        <td>
                            @if (Model.RFQIsSubmitted)
                            {
                                @Html.TextBoxFor(model => model.MakerPN, new { @placeholder = "Maker PN", @readonly = "readonly" })
                            }
                            else
                            {
                                @Html.TextBoxFor(model => model.MakerPN, new { @placeholder = "Maker PN" })
                            }
                            @Html.RequiredHint()
                            @Html.ValidationMessageFor(model => model.MakerPN, string.Empty, new { @class = "help-inline" })
                        </td>
                    </tr>
                    <tr class="general_form_optional">
                        <td colspan="2">@Html.LabelFor(model => model.ReferenceLinks)
                        </td>
                        <td>
                            @if (Model.RFQIsSubmitted)
                            {
                                @Html.TextAreaFor(model => model.ReferenceLinks, new { @class = "form-control rfo-large-textbox", placeholder = "Links And References", @readonly = "readonly" })
                            }
                            else
                            {
                                @Html.TextAreaFor(model => model.ReferenceLinks, new { @class = "form-control rfo-large-textbox", placeholder = "Links And References" })
                            }
                        </td>
                    </tr>
                    <tr class="general_form_optional">
                        <td colspan="2">@Html.LabelFor(model => model.ROHSCompliant)
                        </td>
                        <td>
                            @if (Model.RFQIsSubmitted)
                            {
                                @Html.CheckBoxFor(model => model.ROHSCompliant, new { @disabled = "disabled" })
                            }
                            else
                            {
                                @Html.CheckBoxFor(model => model.ROHSCompliant)
                            }
                        </td>
                    </tr>
                    <tr class="technical_form_optional">
                        <td colspan="2">@Html.LabelFor(model => model.TestEquipmentPurchaseTypeId)
                        </td>
                        <td>
                            @if (Model.RFQIsSubmitted)
                            {
                                @Html.HiddenFor(model => model.TestEquipmentPurchaseTypeId);   
                                @Html.TextBoxFor(model => model.TestEquipmentPurchaseType, new { @placeholder = "Purchase Type", @readonly = "readonly" })
                            }
                            else
                            {
                                @Html.DropDownListFor(model => model.TestEquipmentPurchaseTypeId, Model.AvailableEquipmentPurchaseTypes, "Select Purchase Type", new { @class = "form-control" })
                                    
                            }
                            @Html.RequiredHint()
                            @Html.ValidationMessageFor(m => m.TestEquipmentPurchaseTypeId, string.Empty, new { @class = "help-inline" })
                        </td>
                    </tr>
                    <tr class="technical_form_optional">
                        <td colspan="2">@Html.LabelFor(model => model.TestEquipmentCalibrationTypeId)
                        </td>
                        <td>
                            @if (Model.RFQIsSubmitted)
                            {
                                @Html.HiddenFor(model => model.TestEquipmentCalibrationTypeId);   
                                @Html.TextBoxFor(model => model.TestEquipmentCalibrationType, new { @placeholder = "Calibration Type", @readonly = "readonly" })
                            }
                            else
                            {
                                @Html.DropDownListFor(model => model.TestEquipmentCalibrationTypeId, Model.AvailableEquipmentCalibrationTypes, "Select Calibration Type", new { @class = "form-control" })
                            }
                            @Html.RequiredHint()
                            @Html.ValidationMessageFor(m => m.TestEquipmentCalibrationTypeId, string.Empty, new { @class = "help-inline" })
                        </td>
                    </tr>
                    <tr class="technical_form_optional">
                        <td colspan="2">@Html.LabelFor(model => model.TestEquipmentApplication)
                        </td>
                        <td>
                            @if (Model.RFQIsSubmitted)
                            {
                                @Html.TextBoxFor(model => model.TestEquipmentApplication, new { @class = "rfo-large-textbox", @placeholder = "TestEquipmentApplication", @readonly = "readonly" })
                            }
                            else
                            {
                                @Html.TextBoxFor(model => model.TestEquipmentApplication, new { @class = "rfo-large-textbox", @placeholder = "TestEquipmentApplication" })
                            }
                            @Html.ValidationMessageFor(model => model.TestEquipmentApplication, string.Empty, new { @class = "help-inline" })
                        </td>
                    </tr>
                    <tr>
                        <td colspan="2">@Html.LabelFor(model => model.OtherTechnicalDetails)
                        </td>
                        <td>
                            @if (Model.RFQIsSubmitted)
                            {
                                @Html.TextAreaFor(model => model.OtherTechnicalDetails, new { @class = "form-control rfo-large-textbox", placeholder = "Other Technical Details", @readonly = "readonly" })
                            }
                            else
                            {
                                @Html.TextAreaFor(model => model.OtherTechnicalDetails, new { @class = "form-control rfo-large-textbox", placeholder = "Other Technical Details" })
                            }
                        </td>
                    </tr>
                    <tr>
                        <td colspan="2">@Html.LabelFor(model => model.Attachments)
                        </td>
                        <td>
                            <div id="attachments_@(Model.Id)" class="fu_container">
                                @Html.Hidden("fu_upload_index", 0)
                                @Html.Hidden("fu_create_url", Url.Action("CreateLineAttachment", "FileAttachment", new { rfqLineId = @Model.Id }))
                                @Html.Hidden("fu_upload_url", Url.Action("UploadAttachment", "FileAttachment", new { path = "~/Attachments/RFQLine/" }))
                                @Html.Hidden("fu_upload_count", Model.Attachments.Count)
                                <div class="row-fluid">
                                    <div class="span12 master-wrapper-center-1 fu_button_container">
                                        @if (Model.RFQIsSubmitted)
                                        {
                                            <button type="button" disabled class="btn btn-default fu_button">
                                                <i class="fa fa-plus color6"></i>&nbsp;&nbsp;Add Attachment
                                            </button>
                                        }
                                        else
                                        {
                                            <button id="attachments_button" type="button" class="btn btn-default fu_button">
                                                <i class="fa fa-plus color6"></i>&nbsp;&nbsp;Add Attachment
                                            </button>
                                        }
                                    </div>
                                </div>
                                <div class="row-fluid">
                                    <div id="attachment_uploads_container_@(Model.Id)" class="span12 fu_uploads_container" style="margin-left: 12px; margin-bottom: 10px;">
                                        @foreach (var attachment in Model.Attachments)
                                        {
                                            @Html.Partial("~/Views/FileAttachment/_CreateLineAttachment.cshtml", attachment)
                                        }
                                    </div>
                                </div>
                            </div>
                        </td>
                    </tr>
                    <tr class="more_details">
                        <td colspan="2">@Html.LabelFor(model => model.NoteToBuyer)
                        </td>
                        <td>
                            @Html.TextAreaFor(model => model.NoteToBuyer, new { @class = "form-control rfo-large-textbox", placeholder = "Note To Buyer" })
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
        <button id="submit_line_form" type="submit" class="btn btn-success" style="display: none;">
            <i class="fa fa-save"></i>&nbsp;&nbsp;Save RFQ Line
        </button>
    </div>
    <div class="modal-footer">
        <button class="btn" type="button" data-dismiss="modal">
            <i class="fa fa-close"></i>&nbsp;&nbsp;Cancel</button>
        <button class="btn btn-success" type="button" onclick="$('#submit_line_form').click();">
            <i class="fa fa-save"></i>&nbsp;&nbsp;Save RFQ Line</button>
    </div>
}
