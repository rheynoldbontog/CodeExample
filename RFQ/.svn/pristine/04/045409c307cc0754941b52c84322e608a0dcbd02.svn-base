using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using SSG.Core.Data;
using SSG.Core.Domain.RFQ;

namespace SSG.Services.RFQ
{
    public class RFQService : IRFQService
    {
        #region Fields

        private readonly IRepository<SSG.Core.Domain.RFQ.RFQ> _rfqRepository;
        private readonly IRepository<RFQStatus> _rfqStatusRepository;
        private readonly IRepository<RFQLine> _rfqLineRepository;
        private readonly IRepository<Quotation> _quotationRepository;
        private readonly IRepository<SSG.Core.Domain.Users.User> _userRepository;
        private readonly IRepository<EquipmentPurchaseType> _equipmentPurchaseTypeRepository;
        private readonly IRepository<EquipmentCalibrationType> _equipmentCalibrationTypeRepository;
        
        #endregion

        #region ctor

        public RFQService(IRepository<SSG.Core.Domain.RFQ.RFQ> rfqRepository,
            IRepository<RFQStatus> rfqStatusRepository,
            IRepository<RFQLine> rfqLineRepository,
            IRepository<Quotation> quotationRepository,
            IRepository<SSG.Core.Domain.Users.User> userRepository,
            IRepository<EquipmentPurchaseType> equipmentPurchaseTypeRepository,
            IRepository<EquipmentCalibrationType> equipmentCalibrationTypeRepository)
        {
            this._rfqRepository = rfqRepository;
            this._rfqStatusRepository = rfqStatusRepository;
            this._rfqLineRepository = rfqLineRepository;
            this._quotationRepository = quotationRepository;
            this._userRepository = userRepository;
            this._equipmentPurchaseTypeRepository = equipmentPurchaseTypeRepository;
            this._equipmentCalibrationTypeRepository = equipmentCalibrationTypeRepository;
        }

        #endregion

        #region Methods

        public SSG.Core.Domain.RFQ.RFQ GetById(int id)
        {
            return _rfqRepository.GetById(id);
        }

        public void SaveRFQ(SSG.Core.Domain.RFQ.RFQ rfq)
        { 
            if (rfq == null)
                throw new ArgumentNullException("user");

            _rfqRepository.Insert(rfq);
        }

        public string GetNextRFQNo()
        {
            var max = _rfqRepository.Table.Max(x => x.RFQNo);

            if (max == null)
            {
                //This is the first record...
                max = String.Format("{0:D6}", 1);
            }
            else
            {
                //Not the first record...
                int numValue;
                bool parsed = Int32.TryParse(max, out numValue);

                if (!parsed)
                    max = null;
                else
                {
                    max = String.Format("{0:D6}", ++numValue);
                }

            }

            return max;
        }

        #endregion
    }
}
