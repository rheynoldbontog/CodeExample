using AutoMapper;
using SSG.Admin.Models.Cms;
using SSG.Admin.Models.Common;
using SSG.Admin.Models.Directory;
using SSG.Admin.Models.ExternalAuthentication;
using SSG.Admin.Models.Forums;
using SSG.Admin.Models.Localization;
using SSG.Admin.Models.Logging;
using SSG.Admin.Models.Messages;
using SSG.Admin.Models.News;
using SSG.Admin.Models.Plugins;
using SSG.Admin.Models.Polls;
using SSG.Admin.Models.Settings;
using SSG.Admin.Models.Topics;
using SSG.Admin.Models.Users;
using SSG.Core.Domain.Common;
using SSG.Core.Domain.Directory;
using SSG.Core.Domain.Forums;
using SSG.Core.Domain.Localization;
using SSG.Core.Domain.Logging;
using SSG.Core.Domain.Media;
using SSG.Core.Domain.Messages;
using SSG.Core.Domain.News;
using SSG.Core.Domain.Polls;
using SSG.Core.Domain.Topics;
using SSG.Core.Domain.Users;
using SSG.Core.Infrastructure;
using SSG.Core.Plugins;
using SSG.Services.Authentication.External;
using SSG.Services.Cms;
using SSG.Core.Domain.PSP;
using SSG.Web.Models.PSP;
using SSG.Core.Domain.RFQ;
using SSG.Web.Models.RFQ;

namespace SSG.Admin.Infrastructure
{
    public class AutoMapperStartupTask : IStartupTask
    {
        public void Execute()
        {
            //TODO remove 'CreatedOnUtc' ignore mappings because now presentation layer models have 'CreatedOn' property and core entities have 'CreatedOnUtc' property (distinct names)
            
            //address
            Mapper.CreateMap<Address, AddressModel>()
                .ForMember(dest => dest.AddressHtml, mo => mo.Ignore())
                .ForMember(dest => dest.AvailableCountries, mo => mo.Ignore())
                .ForMember(dest => dest.AvailableStates, mo => mo.Ignore())
                .ForMember(dest => dest.FirstNameDisabled, mo => mo.Ignore())
                .ForMember(dest => dest.LastNameDisabled, mo => mo.Ignore())
                .ForMember(dest => dest.EmailDisabled, mo => mo.Ignore())
                .ForMember(dest => dest.CompanyDisabled, mo => mo.Ignore())
                .ForMember(dest => dest.CountryDisabled, mo => mo.Ignore())
                .ForMember(dest => dest.StateProvinceDisabled, mo => mo.Ignore())
                .ForMember(dest => dest.CityDisabled, mo => mo.Ignore())
                .ForMember(dest => dest.Address1Disabled, mo => mo.Ignore())
                .ForMember(dest => dest.Address2Disabled, mo => mo.Ignore())
                .ForMember(dest => dest.ZipPostalCodeDisabled, mo => mo.Ignore())
                .ForMember(dest => dest.PhoneNumberDisabled, mo => mo.Ignore())
                .ForMember(dest => dest.FaxNumberDisabled, mo => mo.Ignore());
            Mapper.CreateMap<AddressModel, Address>()
                .ForMember(dest => dest.CreatedOnUtc, mo => mo.Ignore())
                .ForMember(dest => dest.Country, mo => mo.Ignore())
                .ForMember(dest => dest.StateProvince, mo => mo.Ignore());

            //countries
            Mapper.CreateMap<CountryModel, Country>()
                .ForMember(dest => dest.StateProvinces, mo => mo.Ignore());
            Mapper.CreateMap<Country, CountryModel>()
                .ForMember(dest => dest.NumberOfStates, mo => mo.MapFrom(src => src.StateProvinces != null ? src.StateProvinces.Count : 0))
                .ForMember(dest => dest.Locales, mo => mo.Ignore());
            //state/provinces
            Mapper.CreateMap<StateProvince, StateProvinceModel>()
                .ForMember(dest => dest.DisplayOrder1, mo => mo.MapFrom(src => src.DisplayOrder))
                .ForMember(dest => dest.Locales, mo => mo.Ignore());
            Mapper.CreateMap<StateProvinceModel, StateProvince>()
                .ForMember(dest => dest.DisplayOrder, mo => mo.MapFrom(src => src.DisplayOrder1))
                .ForMember(dest => dest.Country, mo => mo.Ignore());

            //language
            Mapper.CreateMap<Language, LanguageModel>();
            Mapper.CreateMap<LanguageModel, Language>()
                .ForMember(dest => dest.LocaleStringResources, mo => mo.Ignore());
            //email account
            Mapper.CreateMap<EmailAccount, EmailAccountModel>()
                .ForMember(dest => dest.IsDefaultEmailAccount, mo => mo.Ignore()) 
                .ForMember(dest => dest.SendTestEmailTo, mo => mo.Ignore());
            Mapper.CreateMap<EmailAccountModel, EmailAccount>();
            //message template
            Mapper.CreateMap<MessageTemplate, MessageTemplateModel>()
                .ForMember(dest => dest.AllowedTokens, mo => mo.Ignore())
                .ForMember(dest => dest.Locales, mo => mo.Ignore())
                .ForMember(dest => dest.AvailableEmailAccounts, mo => mo.Ignore());
            Mapper.CreateMap<MessageTemplateModel, MessageTemplate>();
            //queued email
            Mapper.CreateMap<QueuedEmail, QueuedEmailModel>()
                .ForMember(dest => dest.EmailAccountName, mo => mo.MapFrom(src => src.EmailAccount != null ? src.EmailAccount.FriendlyName : string.Empty))
                .ForMember(dest => dest.CreatedOn, mo => mo.Ignore())
                .ForMember(dest => dest.SentOn, mo => mo.Ignore());
            Mapper.CreateMap<QueuedEmailModel, QueuedEmail>()
                .ForMember(dest=> dest.CreatedOnUtc, dt=> dt.Ignore())
                .ForMember(dest => dest.SentOnUtc, mo => mo.Ignore())
                .ForMember(dest => dest.EmailAccount, mo => mo.Ignore())
                .ForMember(dest => dest.EmailAccountId, mo => mo.Ignore());
            //campaign
            Mapper.CreateMap<Campaign, CampaignModel>()
                .ForMember(dest => dest.CreatedOn, mo => mo.Ignore())
                .ForMember(dest => dest.AllowedTokens, mo => mo.Ignore())
                .ForMember(dest => dest.TestEmail, mo => mo.Ignore());
            Mapper.CreateMap<CampaignModel, Campaign>()
                .ForMember(dest => dest.CreatedOnUtc, mo => mo.Ignore());
            //topcis
            Mapper.CreateMap<Topic, TopicModel>()
                .ForMember(dest => dest.Url, mo => mo.Ignore())
                .ForMember(dest => dest.Locales, mo => mo.Ignore());
            Mapper.CreateMap<TopicModel, Topic>();

            //logs
            Mapper.CreateMap<Log, LogModel>()
                .ForMember(dest => dest.UserEmail, mo => mo.Ignore())
                .ForMember(dest => dest.CreatedOn, mo => mo.Ignore());
            Mapper.CreateMap<LogModel, Log>()
                .ForMember(dest => dest.CreatedOnUtc, mo => mo.Ignore())
                .ForMember(dest => dest.LogLevelId, mo => mo.Ignore())
                .ForMember(dest => dest.User, mo => mo.Ignore());
            //ActivityLogType
            Mapper.CreateMap<ActivityLogTypeModel, ActivityLogType>()
                .ForMember(dest => dest.SystemKeyword, mo => mo.Ignore())
                .ForMember(dest => dest.ActivityLog, mo => mo.Ignore());
            Mapper.CreateMap<ActivityLogType, ActivityLogTypeModel>();
            Mapper.CreateMap<ActivityLog, ActivityLogModel>()
                .ForMember(dest => dest.ActivityLogTypeName, mo => mo.MapFrom(src => src.ActivityLogType.Name))
                .ForMember(dest => dest.UserEmail, mo => mo.MapFrom(src => src.User.Email))
                .ForMember(dest => dest.CreatedOn, mo => mo.Ignore());
            //currencies
            Mapper.CreateMap<Currency, CurrencyModel>()
                .ForMember(dest => dest.CreatedOn, mo => mo.Ignore())
                .ForMember(dest => dest.IsPrimaryExchangeRateCurrency, mo => mo.Ignore())
                .ForMember(dest => dest.IsPrimarySiteCurrency, mo => mo.Ignore())
                .ForMember(dest => dest.Locales, mo => mo.Ignore());
            Mapper.CreateMap<CurrencyModel, Currency>()
                .ForMember(dest => dest.CreatedOnUtc, mo => mo.Ignore())
                .ForMember(dest => dest.UpdatedOnUtc, mo => mo.Ignore());
            //measure weights
            Mapper.CreateMap<MeasureWeight, MeasureWeightModel>()
                .ForMember(dest => dest.IsPrimaryWeight, mo => mo.Ignore());
            Mapper.CreateMap<MeasureWeightModel, MeasureWeight>();
            //measure dimensions
            Mapper.CreateMap<MeasureDimension, MeasureDimensionModel>()
                .ForMember(dest => dest.IsPrimaryDimension, mo => mo.Ignore());
            Mapper.CreateMap<MeasureDimensionModel, MeasureDimension>();
            //external authentication methods
            Mapper.CreateMap<IExternalAuthenticationMethod, AuthenticationMethodModel>()
                .ForMember(dest => dest.FriendlyName, mo => mo.MapFrom(src => src.PluginDescriptor.FriendlyName))
                .ForMember(dest => dest.SystemName, mo => mo.MapFrom(src => src.PluginDescriptor.SystemName))
                .ForMember(dest => dest.DisplayOrder, mo => mo.MapFrom(src => src.PluginDescriptor.DisplayOrder))
                .ForMember(dest => dest.IsActive, mo => mo.Ignore())
                .ForMember(dest => dest.ConfigurationActionName, mo => mo.Ignore())
                .ForMember(dest => dest.ConfigurationControllerName, mo => mo.Ignore())
                .ForMember(dest => dest.ConfigurationRouteValues, mo => mo.Ignore());
            //widgets
            Mapper.CreateMap<IWidgetPlugin, WidgetModel>()
                .ForMember(dest => dest.FriendlyName, mo => mo.MapFrom(src => src.PluginDescriptor.FriendlyName))
                .ForMember(dest => dest.SystemName, mo => mo.MapFrom(src => src.PluginDescriptor.SystemName))
                .ForMember(dest => dest.DisplayOrder, mo => mo.MapFrom(src => src.PluginDescriptor.DisplayOrder))
                .ForMember(dest => dest.IsActive, mo => mo.Ignore())
                .ForMember(dest => dest.ConfigurationActionName, mo => mo.Ignore())
                .ForMember(dest => dest.ConfigurationControllerName, mo => mo.Ignore())
                .ForMember(dest => dest.ConfigurationRouteValues, mo => mo.Ignore());
            //plugins
            Mapper.CreateMap<PluginDescriptor, PluginModel>()
                .ForMember(dest => dest.ConfigurationUrl, mo => mo.Ignore())
                .ForMember(dest => dest.Locales, mo => mo.Ignore());
            //newsLetter subscriptions
            Mapper.CreateMap<NewsLetterSubscription, NewsLetterSubscriptionModel>()
                .ForMember(dest => dest.CreatedOn, mo => mo.Ignore());
            Mapper.CreateMap<NewsLetterSubscriptionModel, NewsLetterSubscription>()
                .ForMember(dest => dest.CreatedOnUtc, mo => mo.Ignore())
                .ForMember(dest => dest.NewsLetterSubscriptionGuid, mo => mo.Ignore());
            //forums
            Mapper.CreateMap<ForumGroup, ForumGroupModel>()
                .ForMember(dest => dest.CreatedOn, mo => mo.Ignore())
                .ForMember(dest => dest.ForumModels, mo => mo.Ignore());
            Mapper.CreateMap<ForumGroupModel, ForumGroup>()
                .ForMember(dest => dest.CreatedOnUtc, mo => mo.Ignore())
                .ForMember(dest => dest.UpdatedOnUtc, mo => mo.Ignore())
                .ForMember(dest => dest.Forums, mo => mo.Ignore());
            Mapper.CreateMap<Forum, ForumModel>()
                .ForMember(dest => dest.CreatedOn, mo => mo.Ignore())
                .ForMember(dest => dest.ForumGroups, mo => mo.Ignore());
            Mapper.CreateMap<ForumModel, Forum>()
                .ForMember(dest => dest.NumTopics, mo => mo.Ignore())
                .ForMember(dest => dest.NumPosts, mo => mo.Ignore())
                .ForMember(dest => dest.LastTopicId, mo => mo.Ignore())
                .ForMember(dest => dest.LastPostId, mo => mo.Ignore())
                .ForMember(dest => dest.LastPostUserId, mo => mo.Ignore())
                .ForMember(dest => dest.LastPostTime, mo => mo.Ignore())
                .ForMember(dest => dest.ForumGroup, mo => mo.Ignore())
                .ForMember(dest => dest.CreatedOnUtc, mo => mo.Ignore())
                .ForMember(dest => dest.UpdatedOnUtc, mo => mo.Ignore());
            //news
            Mapper.CreateMap<NewsItem, NewsItemModel>()
                .ForMember(dest => dest.Comments, mo => mo.Ignore())
                .ForMember(dest => dest.StartDate, mo => mo.Ignore())
                .ForMember(dest => dest.EndDate, mo => mo.Ignore())
                .ForMember(dest => dest.CreatedOn, mo => mo.Ignore());
            Mapper.CreateMap<NewsItemModel, NewsItem>()
                .ForMember(dest => dest.NewsComments, mo => mo.Ignore())
                .ForMember(dest => dest.Language, mo => mo.Ignore())
                .ForMember(dest => dest.ApprovedCommentCount, mo => mo.Ignore())
                .ForMember(dest => dest.NotApprovedCommentCount, mo => mo.Ignore())
                .ForMember(dest => dest.StartDateUtc, mo => mo.Ignore())
                .ForMember(dest => dest.EndDateUtc, mo => mo.Ignore())
                .ForMember(dest => dest.CreatedOnUtc, mo => mo.Ignore());
            //news
            Mapper.CreateMap<Poll, PollModel>()
                .ForMember(dest => dest.StartDate, mo => mo.Ignore())
                .ForMember(dest => dest.EndDate, mo => mo.Ignore());
            Mapper.CreateMap<PollModel, Poll>()
                .ForMember(dest => dest.PollAnswers, mo => mo.Ignore())
                .ForMember(dest => dest.Language, mo => mo.Ignore())
                .ForMember(dest => dest.StartDateUtc, mo => mo.Ignore())
                .ForMember(dest => dest.EndDateUtc, mo => mo.Ignore());
            //user roles
            Mapper.CreateMap<UserRole, UserRoleModel>();
            Mapper.CreateMap<UserRoleModel, UserRole>()
                .ForMember(dest => dest.PermissionRecords, mo => mo.Ignore());
            //Settings
            Mapper.CreateMap<NewsSettings, NewsSettingsModel>();
            Mapper.CreateMap<NewsSettingsModel, NewsSettings>();
            Mapper.CreateMap<ForumSettings, ForumSettingsModel>()
                .ForMember(dest => dest.ForumEditorValues, mo => mo.Ignore());
            Mapper.CreateMap<ForumSettingsModel, ForumSettings>()
                .ForMember(dest => dest.TopicSubjectMaxLength, mo => mo.Ignore())
                .ForMember(dest => dest.StrippedTopicMaxLength, mo => mo.Ignore())
                .ForMember(dest => dest.PostMaxLength, mo => mo.Ignore())
                .ForMember(dest => dest.TopicPostsPageLinkDisplayCount, mo => mo.Ignore())
                .ForMember(dest => dest.LatestUserPostsPageSize, mo => mo.Ignore())
                .ForMember(dest => dest.PrivateMessagesPageSize, mo => mo.Ignore())
                .ForMember(dest => dest.ForumSubscriptionsPageSize, mo => mo.Ignore())
                .ForMember(dest => dest.PMSubjectMaxLength, mo => mo.Ignore())
                .ForMember(dest => dest.PMTextMaxLength, mo => mo.Ignore())
                .ForMember(dest => dest.HomePageActiveDiscussionsTopicCount, mo => mo.Ignore())
                .ForMember(dest => dest.ActiveDiscussionsPageTopicCount, mo => mo.Ignore())
                .ForMember(dest => dest.ForumSearchTermMinimumLength, mo => mo.Ignore());
            Mapper.CreateMap<MediaSettings, MediaSettingsModel>()
                .ForMember(dest => dest.PicturesStoredIntoDatabase, mo => mo.Ignore());
            Mapper.CreateMap<MediaSettingsModel, MediaSettings>()
                .ForMember(dest => dest.DefaultPictureZoomEnabled, mo => mo.Ignore())
                .ForMember(dest => dest.DefaultImageQuality, mo => mo.Ignore())
                .ForMember(dest => dest.AutoCompleteSearchThumbPictureSize, mo => mo.Ignore());
            Mapper.CreateMap<UserSettings,  UserUserSettingsModel.UserSettingsModel>();
            Mapper.CreateMap<UserUserSettingsModel.UserSettingsModel, UserSettings>()
                .ForMember(dest => dest.HashedPasswordFormat, mo => mo.Ignore())
                .ForMember(dest => dest.PasswordMinLength, mo => mo.Ignore())
                .ForMember(dest => dest.AvatarMaximumSizeBytes, mo => mo.Ignore())
                .ForMember(dest => dest.OnlineUserMinutes, mo => mo.Ignore())
                .ForMember(dest => dest.SiteLastVisitedPage, mo => mo.Ignore());

            #region PSP

            Mapper.CreateMap<SupportCode, SupportCodeModel>();
            Mapper.CreateMap<SupportCodeModel, SupportCode>();

            #endregion

            #region RFO

            Mapper.CreateMap<EquipmentCalibrationType, EquipmentCalibrationTypeModel>();
            Mapper.CreateMap<EquipmentCalibrationTypeModel, EquipmentCalibrationType>();

            Mapper.CreateMap<EquipmentPurchaseType, EquipmentPurchaseTypeModel>();
            Mapper.CreateMap<EquipmentPurchaseTypeModel, EquipmentPurchaseType>();

            Mapper.CreateMap<RFQStatus, RFQStatusModel>();
            Mapper.CreateMap<RFQStatusModel, RFQStatus>();
            
            Mapper.CreateMap<QuotationModel, Quotation>();
            Mapper.CreateMap<Quotation, QuotationModel>();

            Mapper.CreateMap<RFQLineModel, RFQLine>();
            Mapper.CreateMap<RFQLine, RFQLineModel>()
                .ForMember(dest => dest.LineType, opts => opts.MapFrom(src => src.LineType.Name))
                .ForMember(dest => dest.FormType, opts => opts.MapFrom(src => src.FormType.Name))
                .ForMember(dest => dest.TestEquipmentPurchaseType, opts => opts.MapFrom(src => src.TestEquipmentPurchaseType.Name))
                .ForMember(dest => dest.TestEquipmentCalibrationType, opts => opts.MapFrom(src => src.TestEquipmentCalibrationType.Name))
                .ForMember(dest => dest.QuantityUnit, opts => opts.MapFrom(src => src.QuantityUnit.Name))
                .ForMember(dest => dest.AvailableUnits, opts => opts.Ignore())
                .ForMember(dest => dest.AvailableLineTypes, opts => opts.Ignore())
                .ForMember(dest => dest.AvailableFormTypes, opts => opts.Ignore())
                .ForMember(dest => dest.AvailableEquipmentPurchaseTypes, opts => opts.Ignore())
                .ForMember(dest => dest.AvailableEquipmentCalibrationTypes, opts => opts.Ignore());

            Mapper.CreateMap<RFQModel, RFQ>()
                .ForMember(dest => dest.RFQStatusId, opts => opts.MapFrom(src => src.StatusId))
                .ForMember(dest => dest.RequestorId, opts => opts.MapFrom(src => src.RequesterId));


            Mapper.CreateMap<RFQ, RFQModel>()
                .ForMember(dest => dest.Buyer, opts => opts.MapFrom(src => src.Buyer.Username))
                .ForMember(dest => dest.Requester, opts => opts.MapFrom(src => src.Requestor.Username))
                .ForMember(dest => dest.RequesterId, opts => opts.MapFrom(src => src.RequestorId))
                .ForMember(dest => dest.Status, opts => opts.MapFrom(src => src.RFQStatus.Name))
                .ForMember(dest => dest.BuyersList, opts => opts.Ignore())
                .ForMember(dest => dest.RequestersList, opts => opts.Ignore());

            Mapper.CreateMap<DepartmentModel, Department>();
            Mapper.CreateMap<Department, DepartmentModel>();

            Mapper.CreateMap<RFQLineTypeModel, RFQLineType>();
            Mapper.CreateMap<RFQLineType, RFQLineTypeModel>();

            Mapper.CreateMap<RFQLineFormTypeModel, RFQLineFormType>();
            Mapper.CreateMap<RFQLineFormType, RFQLineFormTypeModel>();

            Mapper.CreateMap<UOMModel, UOM>();
            Mapper.CreateMap<UOM, UOMModel>();

            Mapper.CreateMap<FileAttachmentModel, FileAttachment>();
            Mapper.CreateMap<FileAttachment, FileAttachmentModel>();

            #endregion
        }
        
        public int Order
        {
            get { return 0; }
        }
    }
}