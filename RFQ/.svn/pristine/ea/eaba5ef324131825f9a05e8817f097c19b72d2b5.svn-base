@using SSG.Web.Extensions
@model SSG.Web.Models.RFQ.RFQModel
@{
    Layout = "~/Views/Shared/_ColumnsOne.cshtml";
    var mode = Model.Id == 0 ? "Create" : "Edit";
    ViewBag.Title = "Request For Quotation Form";

}

<script type="text/javascript">

    function SaveRFQ() {
        $('#rfq_form').submit();
    };
    
    function GetRequesterDepartment(requesterId) {

        if (requesterId) {
            $.ajax({
                url: "/Department/GetDepartmentByUserId/",
                type: "GET",
                dataType: "json",
                data: { userId: requesterId },
                success: function (response) {
                    if (response.success) {
                        $('#Department').val(response.name);
                        $("#BuyerId").val(response.buyerId);
                    }
                    else
                        alert("Error in getting department name of selected requester!");
                },
                error: function (request, textStatus, errorThrown) {
                    alert(textStatus);
                }
            });
        }
    }

    $(document).ready(function () {
        $('#rfqLinesTable').dataTable({ searching: false });
    });

</script>

<!-- modal placeholder-->
<div id='myModal' class='modal fade in hide'>
    <div class="modal-dialog">
        <div class="modal-content">
            <div id='myModalContent'></div>
        </div>
    </div>
</div>

@using (Html.BeginHorizontalForm("rfq_form"))
{
    @Html.AntiForgeryToken()
    <div class="page">
        <div class="page-body">
           
            @Html.ValidationSummary(false, "Please fix the following errors:", new { @class = "alert alert-danger" })
            <div class="row-fluid">
                <div class="span12 master-wrapper-center-1">
                    <h3>@ViewBag.Title</h3>
                    <hr />
                </div>
            </div>
            
            <div class="clearfix"></div>
            <div class="row-fluid">
                <div class="span8 master-wrapper-center-2">
                    @Html.HiddenFor(model => model.Id)
                    <div class="control-group">
                        @Html.LabelFor(model => model.RequesterId, true)
                        <div class="span8 controls">
                            @Html.DropDownListFor(model => model.RequesterId, Model.RequestersList, "Select Requester", new { @class = "form-control", @onchange = "GetRequesterDepartment(this.value);" })
                            @Html.RequiredHint()
                            @Html.ValidationMessageFor(m => m.RequesterId, string.Empty, new { @class = "help-inline" })
                        </div>
                    </div>
                    <div class="control-group">
                        @Html.LabelFor(model => model.Department, true)
                        <div class="span8 controls">
                            @Html.TextBoxFor(model => model.Department, new { @placeholder = "Department", @required = "required", @readonly = "readonly" })
                            @Html.RequiredHint()      
                            @Html.ValidationMessageFor(model => model.Department, string.Empty, new { @class = "help-inline" })
                        </div>
                    </div>
                    <div class="control-group">
                        @Html.LabelFor(model => model.BuyerId, true)
                        <div class="span8 controls">
                            @Html.DropDownListFor(model => model.BuyerId, Model.BuyersList, "Select Buyer", new { @class = "form-control" })
                            @Html.RequiredHint()
                            @Html.ValidationMessageFor(m => m.BuyerId, string.Empty, new { @class = "help-inline" })
                        </div>
                    </div>
                    <div class="control-group">
                        @Html.LabelFor(model => model.Subject, true)
                        <div class="span8 controls">
                            @Html.TextAreaFor(model => model.Subject, new { @class = "form-control rfo-medium-textbox", placeholder = "Subject", required = "required" })
                            @Html.RequiredHint()      
                            @Html.ValidationMessageFor(model => model.Subject, string.Empty, new { @class = "help-inline" })
                        </div>
                    </div>

                </div>
                <div class="span4 master-wrapper-center-2">
                    <div class="control-group">
                        @Html.LabelFor(model => model.RFQNo, true)
                        <div class="span8 controls">
                            @if (Model.Id == 0)
                            {
                                @Html.TextBoxFor(model => model.RFQNo, new { @placeholder = "RFQ No", @readonly = "readonly" })
                            }
                            else
                            {
                                <span class="color7" style="font-size: larger; font-weight: bold;">@Html.DisplayFor(model => model.RFQNo)</span>
                            }
                            
                        </div>
                    </div>
                    <div class="control-group">
                        @Html.LabelFor(model => model.DateCreatedOnUtc, true)
                        <div class="span8 controls">
                            @if (Model.Id == 0)
                            {
                                <input type="text" placeholder="RFQ Creation Date" readonly />
                            }
                            else
                            {
                                @Html.DisplayFor(model => @model.DateCreatedOnUtc)
                            }
                            
                        </div>
                    </div>
                    <div class="control-group">
                        @Html.LabelFor(model => model.StatusId, true)
                        <div class="span8 controls">
                            @if (Model.Id == 0)
                            {
                                <input type="text" placeholder="RFQ Status" readonly />
                                @Html.HiddenFor(model => model.StatusId)
                            }
                            else
                            {
                                <span class="color7 f-bold" style="font-size: larger; font-weight: bold;">@Html.DisplayFor(model => @model.Status)</span>
                            }
                            
                        </div>
                    </div>
                </div>
                <div class="clearfix"></div>
                <div class="row-fluid">
                    <div class="span12 master-wrapper-center-1">
                        <button name="new-rfq-button" type="button" class="btn btn-default"><i class="icon-plus"></i> Create RFQ</button>
                        <button name="save-rfq-button" type="button" class="btn btn-success" onclick="SaveRFQ();"><i class="icon-pencil icon-white"></i> Save RFQ</button>
                        @if (Model.Id > 0)
                        {
                            @*<button type="button" class="btn btn-default pull-right" onclick="AddRFQLine();"><i class="icon-plus"></i> Add RFQ Line</button>*@
                            @Html.NoEncodeActionLink("<i class='icon-plus'></i> Add Line", "Add RFQ Line", "Create", "RFQLine", routeValues: new { rfqId = Model.Id, lineCount = Model.Lines.Count }, htmlAttributes: new { data_modal = "", @class = "btn btn-default pull-right" })
                        }
                    </div>
                </div>
           </div>
           <div class="clearfix"></div>
           <div class="row-fluid">
                <div id="replacetarget" class="span12 master-wrapper-center-1">
                    @{ Html.RenderAction("Lines", "RFQLine", new { id = Model.Id }); }
                </div>
           </div>
        </div>
    </div>
}





