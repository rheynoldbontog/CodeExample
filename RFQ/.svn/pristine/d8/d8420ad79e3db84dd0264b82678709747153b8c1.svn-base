using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.UI.WebControls.Expressions;
using AutoMapper;
using SSG.Core;
using SSG.Core.Domain.RFQ;
using SSG.Services.RFQ;
using SSG.Web.Framework;
using SSG.Web.Models.RFQ;

namespace SSG.Web.Controllers
{
    public partial class QuotationController : BaseSSGController
    {
        //
        // GET: /Quotation/

        private readonly IQuotationService _quotationService;
        private readonly IRFQLineService _rfqLineService;
        private readonly IReportService _reportService;
        public QuotationController(
            IQuotationService quotationService,
            IRFQLineService rfqLineService,
            IReportService reportService
            )
        {
            this._quotationService = quotationService;
            this._rfqLineService = rfqLineService;
            this._reportService = reportService;
        }
        public virtual ActionResult Index()
        {
            return View();
        }
        [HttpPost]
        public virtual ActionResult QuotationMatrix(int rfqLineId)
        {
            var query = _quotationService.GetAllQuotations().Where(x => x.RFQLineId == rfqLineId);
            var result = (from q in query
                          select new QuotationModel()
                          {
                              QuotationNo = q.QuotationNo,
                              QuoteUploadDate = q.QuoteUploadDate,
                              Commodity = q.Commodity,
                              QuoteItemDescription = q.QuoteItemDescription,
                              MakerPN = q.MakerPN,
                              UnitPrice = q.UnitPrice,
                              DiscountedPrice = q.DiscountedPrice,
                              MinimumOrderQuantity = q.MinimumOrderQuantity,
                              PaymentTerms = q.PaymentTerms,
                              Supplier = q.Supplier,
                              DeliveryLeadTime = q.DeliveryLeadTime,
                              WarrantyPeriod = q.WarrantyPeriod,
                              BuyerRemarks = q.BuyerRemarks,
                              RequesterRemarks = q.RequesterRemarks,
                              Active = q.Active,
                              RFQLineId = q.RFQLineId,

                          }).ToList();

            var queryRfqLine = _rfqLineService.GetRFQLineById(rfqLineId);

            var rfqLineIndexModel = new RFQLineIndexModel
            {
                RFQNo = queryRfqLine.RFQ.RFQNo,
                RFQLineID = queryRfqLine.Id,
                RFQLineNo = queryRfqLine.RFQLineNo,
                RFQCreationDate = queryRfqLine.DateCreatedOnUtc
            };
            var model = new QuotationViewModel()
            {
                RfqLineIndexModel = rfqLineIndexModel,
                QuotationModel = result
            };
            return View(MVC.Quotation.Views._QuotationMatrix, model);
        }

        public virtual ActionResult ExportExcelQuotation(int id)
        {
            var query = _rfqLineService.GetRFQLineById(id);

            string fileName = string.Format("quotation_report_{0}_{1}.xlsx", DateTime.Now.ToString("yyyy-MM-dd-HH-mm-ss"), CommonHelper.GenerateRandomDigitCode(3));
            string filePath = System.IO.Path.Combine(HostingEnvironment.ApplicationPhysicalPath, "content\\files\\ExportImport", fileName);

            _reportService.ExportQuotation(filePath, query);

            var bytes = System.IO.File.ReadAllBytes(filePath);

            return File(bytes, "text/xls", fileName);
        }

    }
}
